// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum USER_TYPE {
    USER
    ARTIST
}

enum GENRES {
    TRAP
    OLD_SCHOOL
    ROCK
    POP
    JAZZ
    HIP_HOP
    ELECTRONIC
    CLASSICAL
    REGGAE
    COUNTRY
    BLUES
    RNB
    METAL
    FOLK
    TECHNO
    AMBIENT
    GRIME
    HOUSE
    INDIE
    LATIN
}

model User {
    id            String     @id @default(cuid())
    name          String
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    coverImage    String?
    about         String?
    aboutImage    String?
    type          USER_TYPE  @default(USER)
    password      String?
    isPremium     Boolean    @default(false)
    accounts      Account[]
    sessions      Session[]
    Album         Playlist[]
    playlists     String[]   @default([])
    Track         Track[]
    followers     String[]   @default([])
    discoveredOn  String[]   @default([])
    tabs          Tab[]
    artistPick    String?
    genres        GENRES[]   @default([])

    tracksHistoryLastReset DateTime        @default(now())
    tracksHistory          String[]        @default([])
    SearchHistory          SearchHistory[]
    Preference             Preference[]
    QueueList              QueueList[]

    seenNotifications String[]       @default([])
    Notification      Notification[]
}

model Notification {
    id String @id @default(cuid())

    artist     User      @relation(fields: [userId], references: [id])
    userId     String
    playlist   Playlist? @relation(fields: [playlistId], references: [id], onDelete: Cascade)
    playlistId String
}

enum TAB_TYPE {
    ARTIST
    PLAYLIST
}

model Tab {
    id     String   @id @default(cuid())
    title  String   @default("")
    type   TAB_TYPE @default(PLAYLIST)
    href   String   @default("")
    User   User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String?
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

enum PLAYLIST_TYPE {
    SINGLE
    ALBUM
}

enum PLAYLIST_VISIBILITY {
    PRIVATE
    PUBLIC
}

model Playlist {
    id          String @id @default(cuid())
    title       String
    description String
    imageSrc    String @default("https://hvillzcyzejfbqcubhwi.supabase.co/storage/v1/object/public/images/no-image-src-album")

    creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId String

    type       PLAYLIST_TYPE       @default(ALBUM)
    createdAt  DateTime            @default(now())
    visibility PLAYLIST_VISIBILITY @default(PUBLIC)
    genres     GENRES[]            @default([])

    Track        Track[]
    Notification Notification[]
}

model Track {
    id            String   @id @default(cuid())
    order         Int      @default(autoincrement())
    title         String
    author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId      String
    authorIds     String[] @default([])
    imgSrc        String
    trackSrc      String
    album         Playlist @relation(fields: [albumId], references: [id], onDelete: Cascade)
    albumId       String
    playlists     String[] @default([])
    dateAdded     DateTime @default(now())
    duration      Int
    plays         Int      @default(0)
    genres        GENRES[] @default([])
    bestTimeStart Int?     @default(0)
    bestTimeEnd   Int?     @default(15)
}

model SearchHistory {
    id     String   @id @default(cuid())
    type   TAB_TYPE @default(PLAYLIST)
    User   User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String?

    searchUser     String?
    searchPlaylist String?

    createdAt DateTime @default(now())
}

enum CATEGORIES {
    Playlists
    Artists
    Albums
}

model Preference {
    id                 String   @id @default(cuid())
    user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId             String
    pinnedHomeSections String[] @default([])
    hiddenHomeSections String[] @default([])
    homeSectionsSort   String[] @default(["made for you", "your favorite artists", "best of artists"])
    homeLibSection     String[] @default([])

    showPlayingView        Boolean @default(true)
    ShowPlaylistsInProfile Boolean @default(true)
    ShowTopPlayingArtists  Boolean @default(false)
    ShowFollowingList      Boolean @default(false)
    ShowFollowersList      Boolean @default(true)
    ShowTopPlayingTracks   Boolean @default(false)

    showSidebar     Boolean     @default(true)
    currentCategory CATEGORIES?

    @@unique([userId])
}

enum QUEUE_TYPE {
    PLAYLIST
    ARTIST
}

enum REPEAT_QUEUE_TYPE {
    TRACK
    PLAYLIST
}

model QueueList {
    id             String             @id @default(cuid())
    user           User               @relation(fields: [userId], references: [id])
    userId         String
    queues         Queue[]
    volumeLevel    Int                @default(50)
    repeatQueue    REPEAT_QUEUE_TYPE? @default(PLAYLIST)
    randomize      Boolean            @default(false)
    currentQueueId String

    @@unique([userId])
}

model Queue {
    id                     String      @id @default(cuid())
    type                   QUEUE_TYPE? @default(PLAYLIST)
    typeId                 String?
    currentPlaying         String
    currentPlayingProgress Int         @default(0)
    trackList              String[]    @default([])

    QueueList QueueList[]
}
